package bd.edu.seu.springbootdemo.controller;import bd.edu.seu.springbootdemo.exceptions.ResourceAlreadyExistException;import bd.edu.seu.springbootdemo.exceptions.ResourceDoesNotExistException;import bd.edu.seu.springbootdemo.model.Student;import bd.edu.seu.springbootdemo.service.StudentService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.*;@RestController@RequestMapping(value = "/api/v1/students")public class StudentController {    private StudentService studentService;    public StudentController(StudentService studentService) {        this.studentService = studentService;    }//    @GetMapping(value = "/findById/{id}")//    public Student findById(@PathVariable Long id){//        return studentRepository.findById(id).get();//    }//    @GetMapping(value = "/findAll")//    public Collection<Student> findAll(){//        List<Student> students = new ArrayList<>();//        studentRepository.findAll().forEach(students::add);//        return students;//    }//    @GetMapping(value = "/insert/{id}/{name}/{cgpa}")//    public Student insert(@PathVariable Long id,@PathVariable String name, @PathVariable double cgpa){//        Student student = studentRepository.save(new Student(id, name, cgpa, LocalDate.now()));//        return student;//    }//    @GetMapping(value = "/findByName/{name}")//    public List<Student> findByName(@PathVariable String name){//        return studentRepository.findByName(name);//    }//    @GetMapping(value = "/findByNamePartialMatch/{name}")//    public List<Student> findByNamePartialMatch(@PathVariable String name){//        return studentRepository.findByNameContaining(name);//    }//    @GetMapping(value = "/findByDobAfter/{localDate}")//    public List<Student> findByDOBAfter(@PathVariable LocalDate localDate){//        return studentRepository.findAllByLocalDateAfter(localDate);//    }//    @GetMapping(value = "/deleteById/{id}")//    public void deleteById(@PathVariable Long id){//        studentRepository.deleteById(id);//    }//    @GetMapping(value = "/deleteAll")//    public void deleteAll(){//        studentRepository.deleteAll();//    }//    @GetMapping(value = "/update/{id}/{name}/{cgpa}")//    public void update(@PathVariable long id,String name, double cgpa){//        studentRepository.deleteById(id);//        Student student = new Student(id,name,cgpa,LocalDate.now());//        studentRepository.save(student);//    }    @GetMapping("")    public List<Student> findAll(){        return studentService.findAll();    }    @GetMapping("/{id}")    public ResponseEntity<Student> findById(@PathVariable Long id){        try {            Student student = studentService.findById(id);            return ResponseEntity.ok(student);        } catch (ResourceDoesNotExistException e) {            //e.printStackTrace();            return ResponseEntity.notFound().build();        }    }    @GetMapping("/name/{name}")    public ResponseEntity<List<Student>> findByName(@PathVariable String name){        try {            List<Student> students = studentService.findByName(name);            return ResponseEntity.ok(students);        } catch (ResourceDoesNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/search/{name}")    public ResponseEntity<List<Student>> findByNamePartialMatch(@PathVariable String name){        try {            List<Student> byNamePartialMatch = studentService.findByNamePartialMatch(name);            return ResponseEntity.ok(byNamePartialMatch);        } catch (ResourceDoesNotExistException e) {            //e.printStackTrace();            return ResponseEntity.notFound().build();        }    }    @PostMapping(value = "")    public ResponseEntity<Student> insertStudent(@RequestBody Student student){        try {            Student insertedStudent = studentService.insertStudent(student);            return ResponseEntity.status(HttpStatus.CREATED).body(insertedStudent);        } catch (ResourceAlreadyExistException e) {            //e.printStackTrace();            return ResponseEntity.badRequest().body(null);        }    }    @PostMapping("/update/{id}")    public ResponseEntity<Student> updateStudent(@RequestBody Student student,@PathVariable Long id){        try {            Student updateStudent = studentService.updateStudent(id, student);            return ResponseEntity.ok(updateStudent);        } catch (ResourceDoesNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Long> deleteStudent(@PathVariable long id){        boolean delete = studentService.deleteById(id);        if(delete){            return ResponseEntity.ok(id);        }else{            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/deleteAll")    public ResponseEntity<Boolean> deleteAll(){        try {            studentService.deleteAll();            return ResponseEntity.ok(Boolean.TRUE);        } catch (ResourceDoesNotExistException e) {            return ResponseEntity.noContent().build();        }    }}