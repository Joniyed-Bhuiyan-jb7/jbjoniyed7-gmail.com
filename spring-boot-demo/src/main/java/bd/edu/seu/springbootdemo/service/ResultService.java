package bd.edu.seu.springbootdemo.service;import bd.edu.seu.springbootdemo.exceptions.ResourceAlreadyExistException;import bd.edu.seu.springbootdemo.exceptions.ResourceDoesNotExistException;import bd.edu.seu.springbootdemo.model.Result;import bd.edu.seu.springbootdemo.repository.ResultRepository;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class ResultService {    private ResultRepository resultRepository;    public ResultService(ResultRepository resultRepository) {        this.resultRepository = resultRepository;    }    public List<Result> findAll(){        List<Result> results = resultRepository.findAll();        return results;    }    public Result findById(long id) throws ResourceDoesNotExistException {        Optional<Result> result = resultRepository.findById(id);        if(result.isPresent()){            return result.get();        }else{            throw new ResourceDoesNotExistException(id+" ");        }    }    public Result insertResult(Result result) throws ResourceAlreadyExistException {        if(!resultRepository.existsById(result.getId())){            return resultRepository.save(result);        }else{            throw new ResourceAlreadyExistException(result.getId()+"");        }    }    public void updateResult(long id,Result result) throws ResourceDoesNotExistException {        if(resultRepository.existsById(id)){            result.setId(id);            resultRepository.save(result);        }else{            throw new ResourceDoesNotExistException(id+"");        }    }    public void deleteResultById(long id) throws ResourceDoesNotExistException {        if(resultRepository.existsById(id)){            resultRepository.deleteById(id);        }else{            throw new ResourceDoesNotExistException(id+"");        }    }}