package bd.edu.seu.springbootdemo.service;import bd.edu.seu.springbootdemo.exceptions.ResourceAlreadyExistException;import bd.edu.seu.springbootdemo.exceptions.ResourceDoesNotExistException;import bd.edu.seu.springbootdemo.model.Student;import bd.edu.seu.springbootdemo.repository.StudentRepository;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Servicepublic class StudentService {    private StudentRepository studentRepository;    public StudentService(StudentRepository studentRepository) {        this.studentRepository = studentRepository;    }    public List<Student> findAll() {        List<Student> students = new ArrayList<>();        studentRepository.findAll().forEach(students::add);        return students;    }    public Student findById(Long id) throws ResourceDoesNotExistException {        Optional<Student> student = studentRepository.findById(id);        if(student.isPresent()){            return student.get();        }else{            throw new ResourceDoesNotExistException(id+"");        }    }    public List<Student> findByName(String name) throws ResourceDoesNotExistException {        List<Student> students = studentRepository.findByName(name);        if(students.size()>0){            return students;        }else        {            throw new ResourceDoesNotExistException("There is no student available as "+name);        }    }    public List<Student> findByNamePartialMatch(String name) throws ResourceDoesNotExistException {        List<Student> byNameContaining = studentRepository.findByNameContaining(name);        if(byNameContaining.size()>0){            return byNameContaining;        }else{            throw new ResourceDoesNotExistException(name);        }    }    public Student insertStudent(Student student) throws ResourceAlreadyExistException {        Optional<Student> student1 = studentRepository.findById(student.getId());        if(student1.isPresent()){            throw new ResourceAlreadyExistException(student.getId()+"");        }else{            return studentRepository.save(student);        }    }    public Student updateStudent(long id,Student student) throws ResourceDoesNotExistException {        Optional<Student> student1 = studentRepository.findById(id);        if(student1.isPresent()){            student.setId(id);            return studentRepository.save(student);        }else{            throw new ResourceDoesNotExistException(id+"");        }    }    public boolean deleteById(long id){        Optional<Student> student = studentRepository.findById(id);        student.ifPresent(student1 -> studentRepository.deleteById(id));        return student.isPresent();    }    public void deleteAll() throws ResourceDoesNotExistException {        List<Student> students = new ArrayList<>();        studentRepository.findAll().forEach(students::add);        if(!students.isEmpty()){            studentRepository.deleteAll();        }else {            throw new ResourceDoesNotExistException("no entry available");        }    }}